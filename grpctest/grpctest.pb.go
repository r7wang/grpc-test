// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpctest.proto

package grpctest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserMessage struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMessage) Reset()         { *m = UserMessage{} }
func (m *UserMessage) String() string { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()    {}
func (*UserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fee87ad8a7b0b4b0, []int{0}
}

func (m *UserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMessage.Unmarshal(m, b)
}
func (m *UserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMessage.Marshal(b, m, deterministic)
}
func (m *UserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMessage.Merge(m, src)
}
func (m *UserMessage) XXX_Size() int {
	return xxx_messageInfo_UserMessage.Size(m)
}
func (m *UserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UserMessage proto.InternalMessageInfo

func (m *UserMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ProcessedMessage struct {
	Message              *UserMessage         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ReceivedTime         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=receivedTime,proto3" json:"receivedTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProcessedMessage) Reset()         { *m = ProcessedMessage{} }
func (m *ProcessedMessage) String() string { return proto.CompactTextString(m) }
func (*ProcessedMessage) ProtoMessage()    {}
func (*ProcessedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fee87ad8a7b0b4b0, []int{1}
}

func (m *ProcessedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessedMessage.Unmarshal(m, b)
}
func (m *ProcessedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessedMessage.Marshal(b, m, deterministic)
}
func (m *ProcessedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessedMessage.Merge(m, src)
}
func (m *ProcessedMessage) XXX_Size() int {
	return xxx_messageInfo_ProcessedMessage.Size(m)
}
func (m *ProcessedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessedMessage proto.InternalMessageInfo

func (m *ProcessedMessage) GetMessage() *UserMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ProcessedMessage) GetReceivedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ReceivedTime
	}
	return nil
}

func init() {
	proto.RegisterType((*UserMessage)(nil), "grpctest.UserMessage")
	proto.RegisterType((*ProcessedMessage)(nil), "grpctest.ProcessedMessage")
}

func init() { proto.RegisterFile("grpctest.proto", fileDescriptor_fee87ad8a7b0b4b0) }

var fileDescriptor_fee87ad8a7b0b4b0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0xdd, 0x22, 0x5a, 0xa7, 0xa2, 0x65, 0x45, 0x28, 0xb9, 0xa8, 0x39, 0xf5, 0xb4, 0x29,
	0xf5, 0x2e, 0x78, 0x8a, 0x1e, 0x14, 0x89, 0xf1, 0x01, 0xda, 0xe4, 0x67, 0x08, 0x34, 0xee, 0xb2,
	0x33, 0x15, 0xef, 0xbe, 0x91, 0x4f, 0x28, 0x6e, 0x58, 0xff, 0xe1, 0xad, 0xde, 0x66, 0x87, 0x6f,
	0xbf, 0xfd, 0x58, 0x3a, 0x68, 0xbc, 0xab, 0x04, 0x2c, 0xc6, 0x79, 0x2b, 0x56, 0x0f, 0xe3, 0x39,
	0x39, 0x69, 0xac, 0x6d, 0x56, 0xc8, 0xc2, 0x7e, 0xb9, 0x7e, 0xcc, 0xa4, 0xed, 0xc0, 0xb2, 0xe8,
	0x5c, 0x8f, 0xa6, 0x67, 0x34, 0x7a, 0x60, 0xf8, 0x1b, 0x30, 0x2f, 0x1a, 0x68, 0x4d, 0xdb, 0x82,
	0x17, 0x99, 0xa8, 0x53, 0x35, 0xdd, 0x2b, 0xc2, 0x9c, 0xbe, 0x2a, 0x1a, 0xdf, 0x79, 0x5b, 0x81,
	0x19, 0x75, 0x04, 0x33, 0xda, 0xed, 0xfa, 0x31, 0xb0, 0xa3, 0xf9, 0xb1, 0xf9, 0x8c, 0xf8, 0x26,
	0x2c, 0x22, 0xa5, 0x2f, 0x68, 0xdf, 0xa3, 0x42, 0xfb, 0x8c, 0xba, 0x6c, 0x3b, 0x4c, 0x06, 0xe1,
	0x56, 0x62, 0xfa, 0x40, 0x13, 0x03, 0x4d, 0x19, 0x03, 0x8b, 0x1f, 0xfc, 0xfc, 0x6d, 0x40, 0xc3,
	0xdc, 0xbb, 0xaa, 0x04, 0x8b, 0xbe, 0x24, 0xca, 0x21, 0xb1, 0xe5, 0xef, 0xa7, 0x93, 0xe4, 0x6b,
	0xfd, 0x3b, 0x3f, 0xdd, 0xd2, 0x57, 0x74, 0xf8, 0xa1, 0x58, 0xaf, 0xa4, 0xdd, 0xc4, 0x33, 0x53,
	0xfa, 0x9a, 0xc6, 0xf7, 0x78, 0xaa, 0x37, 0x56, 0x4d, 0x95, 0xbe, 0xa5, 0xa3, 0x1c, 0xf2, 0x4f,
	0xb6, 0x99, 0x5a, 0xee, 0x84, 0x6f, 0x3d, 0x7f, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x36, 0xab, 0x2a,
	0x55, 0x21, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcTestClient is the client API for GrpcTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcTestClient interface {
	GetMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*ProcessedMessage, error)
	GetMultiMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (GrpcTest_GetMultiMessageClient, error)
	SendMultiMessage(ctx context.Context, opts ...grpc.CallOption) (GrpcTest_SendMultiMessageClient, error)
	GetSendMultiMessage(ctx context.Context, opts ...grpc.CallOption) (GrpcTest_GetSendMultiMessageClient, error)
}

type grpcTestClient struct {
	cc *grpc.ClientConn
}

func NewGrpcTestClient(cc *grpc.ClientConn) GrpcTestClient {
	return &grpcTestClient{cc}
}

func (c *grpcTestClient) GetMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*ProcessedMessage, error) {
	out := new(ProcessedMessage)
	err := c.cc.Invoke(ctx, "/grpctest.GrpcTest/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcTestClient) GetMultiMessage(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (GrpcTest_GetMultiMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcTest_serviceDesc.Streams[0], "/grpctest.GrpcTest/GetMultiMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcTestGetMultiMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcTest_GetMultiMessageClient interface {
	Recv() (*ProcessedMessage, error)
	grpc.ClientStream
}

type grpcTestGetMultiMessageClient struct {
	grpc.ClientStream
}

func (x *grpcTestGetMultiMessageClient) Recv() (*ProcessedMessage, error) {
	m := new(ProcessedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcTestClient) SendMultiMessage(ctx context.Context, opts ...grpc.CallOption) (GrpcTest_SendMultiMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcTest_serviceDesc.Streams[1], "/grpctest.GrpcTest/SendMultiMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcTestSendMultiMessageClient{stream}
	return x, nil
}

type GrpcTest_SendMultiMessageClient interface {
	Send(*UserMessage) error
	CloseAndRecv() (*ProcessedMessage, error)
	grpc.ClientStream
}

type grpcTestSendMultiMessageClient struct {
	grpc.ClientStream
}

func (x *grpcTestSendMultiMessageClient) Send(m *UserMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcTestSendMultiMessageClient) CloseAndRecv() (*ProcessedMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProcessedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcTestClient) GetSendMultiMessage(ctx context.Context, opts ...grpc.CallOption) (GrpcTest_GetSendMultiMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcTest_serviceDesc.Streams[2], "/grpctest.GrpcTest/GetSendMultiMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcTestGetSendMultiMessageClient{stream}
	return x, nil
}

type GrpcTest_GetSendMultiMessageClient interface {
	Send(*UserMessage) error
	Recv() (*ProcessedMessage, error)
	grpc.ClientStream
}

type grpcTestGetSendMultiMessageClient struct {
	grpc.ClientStream
}

func (x *grpcTestGetSendMultiMessageClient) Send(m *UserMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcTestGetSendMultiMessageClient) Recv() (*ProcessedMessage, error) {
	m := new(ProcessedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcTestServer is the server API for GrpcTest service.
type GrpcTestServer interface {
	GetMessage(context.Context, *UserMessage) (*ProcessedMessage, error)
	GetMultiMessage(*UserMessage, GrpcTest_GetMultiMessageServer) error
	SendMultiMessage(GrpcTest_SendMultiMessageServer) error
	GetSendMultiMessage(GrpcTest_GetSendMultiMessageServer) error
}

// UnimplementedGrpcTestServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcTestServer struct {
}

func (*UnimplementedGrpcTestServer) GetMessage(ctx context.Context, req *UserMessage) (*ProcessedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedGrpcTestServer) GetMultiMessage(req *UserMessage, srv GrpcTest_GetMultiMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMultiMessage not implemented")
}
func (*UnimplementedGrpcTestServer) SendMultiMessage(srv GrpcTest_SendMultiMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMultiMessage not implemented")
}
func (*UnimplementedGrpcTestServer) GetSendMultiMessage(srv GrpcTest_GetSendMultiMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSendMultiMessage not implemented")
}

func RegisterGrpcTestServer(s *grpc.Server, srv GrpcTestServer) {
	s.RegisterService(&_GrpcTest_serviceDesc, srv)
}

func _GrpcTest_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcTestServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctest.GrpcTest/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcTestServer).GetMessage(ctx, req.(*UserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcTest_GetMultiMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcTestServer).GetMultiMessage(m, &grpcTestGetMultiMessageServer{stream})
}

type GrpcTest_GetMultiMessageServer interface {
	Send(*ProcessedMessage) error
	grpc.ServerStream
}

type grpcTestGetMultiMessageServer struct {
	grpc.ServerStream
}

func (x *grpcTestGetMultiMessageServer) Send(m *ProcessedMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcTest_SendMultiMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcTestServer).SendMultiMessage(&grpcTestSendMultiMessageServer{stream})
}

type GrpcTest_SendMultiMessageServer interface {
	SendAndClose(*ProcessedMessage) error
	Recv() (*UserMessage, error)
	grpc.ServerStream
}

type grpcTestSendMultiMessageServer struct {
	grpc.ServerStream
}

func (x *grpcTestSendMultiMessageServer) SendAndClose(m *ProcessedMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcTestSendMultiMessageServer) Recv() (*UserMessage, error) {
	m := new(UserMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcTest_GetSendMultiMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcTestServer).GetSendMultiMessage(&grpcTestGetSendMultiMessageServer{stream})
}

type GrpcTest_GetSendMultiMessageServer interface {
	Send(*ProcessedMessage) error
	Recv() (*UserMessage, error)
	grpc.ServerStream
}

type grpcTestGetSendMultiMessageServer struct {
	grpc.ServerStream
}

func (x *grpcTestGetSendMultiMessageServer) Send(m *ProcessedMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcTestGetSendMultiMessageServer) Recv() (*UserMessage, error) {
	m := new(UserMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GrpcTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.GrpcTest",
	HandlerType: (*GrpcTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _GrpcTest_GetMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMultiMessage",
			Handler:       _GrpcTest_GetMultiMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMultiMessage",
			Handler:       _GrpcTest_SendMultiMessage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSendMultiMessage",
			Handler:       _GrpcTest_GetSendMultiMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpctest.proto",
}
